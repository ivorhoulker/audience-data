[{"/Users/ivorhoulker/_CODE/questioner/src/App.tsx":"1","/Users/ivorhoulker/_CODE/questioner/src/index.tsx":"2","/Users/ivorhoulker/_CODE/questioner/src/reportWebVitals.ts":"3","/Users/ivorhoulker/_CODE/questioner/src/routes/SetQuestions.tsx":"4","/Users/ivorhoulker/_CODE/questioner/src/components/EditableQuestion.tsx":"5","/Users/ivorhoulker/_CODE/questioner/src/types/Question.ts":"6","/Users/ivorhoulker/_CODE/questioner/src/components/QuestionForm.tsx":"7","/Users/ivorhoulker/_CODE/questioner/src/helpers/sentenceCase.ts":"8","/Users/ivorhoulker/_CODE/questioner/src/components/AnswerForm.tsx":"9","/Users/ivorhoulker/_CODE/questioner/src/app/store.ts":"10","/Users/ivorhoulker/_CODE/questioner/src/routes/AnswerQuestions.tsx":"11","/Users/ivorhoulker/_CODE/questioner/src/components/AnswerGroup.tsx":"12","/Users/ivorhoulker/_CODE/questioner/src/components/Navbar.tsx":"13"},{"size":1160,"mtime":1608705428672,"results":"14","hashOfConfig":"15"},{"size":1699,"mtime":1608704134354,"results":"16","hashOfConfig":"15"},{"size":425,"mtime":1608377087113,"results":"17","hashOfConfig":"15"},{"size":2135,"mtime":1608628598804,"results":"18","hashOfConfig":"15"},{"size":1535,"mtime":1608454931719,"results":"19","hashOfConfig":"15"},{"size":1717,"mtime":1608481769400,"results":"20","hashOfConfig":"15"},{"size":5209,"mtime":1608625477064,"results":"21","hashOfConfig":"15"},{"size":175,"mtime":1608533610754,"results":"22","hashOfConfig":"15"},{"size":1846,"mtime":1608705185715,"results":"23","hashOfConfig":"15"},{"size":2784,"mtime":1608699802542,"results":"24","hashOfConfig":"15"},{"size":975,"mtime":1608705443628,"results":"25","hashOfConfig":"15"},{"size":1672,"mtime":1608700900891,"results":"26","hashOfConfig":"15"},{"size":3400,"mtime":1608705455392,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"jyyu1h",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ivorhoulker/_CODE/questioner/src/App.tsx",["61"],"/Users/ivorhoulker/_CODE/questioner/src/index.tsx",[],"/Users/ivorhoulker/_CODE/questioner/src/reportWebVitals.ts",[],["62","63"],"/Users/ivorhoulker/_CODE/questioner/src/routes/SetQuestions.tsx",["64"],"// import React, { useState } from \"react\";\n\n// import EditableQuestion from \"../components/EditableQuestion\";\n// import { firestore } from \"../Firebase\";\n// import firebase from \"firebase/app\";\n// import {\n//   useCollectionData,\n//   useCollection,\n// } from \"react-firebase-hooks/firestore\";\n// import { Question } from \"../types/Question\";\n// import QuestionForm from \"../components/QuestionForm\";\n\n// interface Props {}\n\n// const SetQuestions: React.FC<Props> = ({}) => {\n//   //   const questionsRef = firestore.collection(\"questions\");\n//   //   const query = questionsRef.limit(9999);\n\n//   //   const [\n//   //     questions,\n//   //     questionsLoading,\n//   //     questionsError,\n//   //   ] = useCollectionData<Question>(query);\n\n//   //   questions && console.log(questions);\n//   const handleAddQuestion = () => {\n//     //TODO\n//     console.log(\"adding...\");\n//   };\n//   const questionsRef = firestore.collection(\"questions\");\n//   const query = questionsRef.limit(9999);\n\n//   const [q, qLoading, qError] = useCollection(query);\n//   const questions: Question[] =\n//     q &&\n//     (q as firebase.firestore.QuerySnapshot).docs.map((doc) => {\n//       return { ...(doc.data() as Question), id: doc.id };\n//     });\n//   return (\n//     <>\n//       {/* {questionsError && (\n//         <strong>Error: {JSON.stringify(questionsError)}</strong>\n//       )}\n//       {questionsLoading && <span>Collection: Loading...</span>}\n//       {questions &&\n//         questions.map((q, i) => {\n//           return <EditableQuestion key={i} question={q} />;\n//         })} */}\n//       <div className=\"container-fluid mb-3\">\n//         {questions &&\n//           questions.map((question) => (\n//             <div className=\"card mb-3 bg-light\">\n//               <div className=\"card-body\">\n//                 <QuestionForm question={question} />\n//               </div>\n//             </div>\n//           ))}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default SetQuestions;\nimport React from \"react\";\n\ninterface Props {}\n\nconst SetQuestions: React.FC<Props> = ({}) => {\n  return <>Qs</>;\n};\n\nexport default SetQuestions;\n","/Users/ivorhoulker/_CODE/questioner/src/components/EditableQuestion.tsx",["65"],"import React, { useState } from \"react\";\nimport { Question as QuestionType } from \"../types/Question\";\nimport { firestore, auth, timestamp } from \"../Firebase\";\n\nconst EditableQuestion: React.FC<{ question: QuestionType }> = ({\n  question,\n}) => {\n  const [formValue, setFormValue] = useState(\"\");\n\n  const setQuestion = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    const { uid } = auth.currentUser!;\n    const questionsRef = firestore.collection(\"questions\");\n    const doc = await questionsRef.doc(\"testID\").get();\n    const content = {\n      english: formValue,\n      updatedAt: timestamp(),\n      uid,\n    };\n    if (doc.exists) {\n      const docId = await questionsRef\n        .doc(\"testID\")\n        .set(content, { merge: true });\n    } else {\n      //ADD NEW DOC\n      questionsRef.add(content);\n    }\n\n    // await questionsRef.add({\n    //   text: formValue,\n    //   createdAt: timestamp(),\n    //   uid,\n    // });\n\n    // questionsRef\n    //   .get()\n    //   .then((doc) => {\n    //     if (doc.exists) {\n    //       return usernameUnavailable();\n    //     }\n\n    //     return createAccount();\n    //   })\n    //   .catch((error) => handleError(error));\n  };\n\n  return (\n    <>\n      <input\n        value={question.english}\n        onChange={(e) => setFormValue(e.target.value)}\n      ></input>\n      <button onClick={setQuestion}>Set</button>\n      <ul>\n        <li>{question.english}</li>\n        <li>{question.category}</li>\n      </ul>\n    </>\n  );\n};\n\nexport default EditableQuestion;\n",["66","67"],"/Users/ivorhoulker/_CODE/questioner/src/types/Question.ts",[],["68","69"],"/Users/ivorhoulker/_CODE/questioner/src/components/QuestionForm.tsx",["70","71","72","73","74","75","76","77","78","79"],"import React, { useState } from \"react\";\nimport { Category, Question } from \"../types/Question\";\nimport { firestore, auth, timestamp } from \"../Firebase\";\nimport firebase from \"firebase/app\";\nimport {\n  useCollectionData,\n  useCollection,\n} from \"react-firebase-hooks/firestore\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport categories from \"../data/categories.json\";\nimport { sentenceCase } from \"../helpers/sentenceCase\";\ninterface Props {\n  question: Question;\n}\n\nconst schema = yup.object().shape({\n  english: yup.string().trim().required(),\n  chinese: yup.string().trim().required(),\n  category: yup.string().required(),\n  subcategory: yup.string().required(),\n  strength: yup.number().integer().positive().moreThan(0).required(),\n  multiplier: yup.number().required(),\n});\nconst QuestionForm: React.FC<Props> = ({ question }) => {\n  const {\n    register,\n    handleSubmit,\n    setError,\n    errors,\n    getValues,\n  } = useForm<Question>({\n    resolver: yupResolver(schema),\n  });\n\n  const questionsRef = firestore.collection(\"questions\");\n  const { uid } = auth.currentUser!;\n  // const query = questionsRef.limit(9999);\n\n  // const [q, qLoading, qError] = useCollection(query);\n  // const questions: Question[] =\n  //   q &&\n  //   (q as firebase.firestore.QuerySnapshot).docs.map((doc) => {\n  //     return { ...(doc.data() as Question), id: doc.id };\n  //   });\n  const onSubmit = async (data: Question) => {\n    const doc = await questionsRef.doc(question.id).get();\n    const content = {\n      ...data,\n      updatedAt: timestamp(),\n      editedBy: uid,\n    };\n    console.log(\"content: \", content);\n    if (doc.exists) {\n      await questionsRef.doc(question.id).set(content, { merge: true });\n      alert(\"done\");\n    } else {\n      //ADD NEW DOC\n      console.warn(\"id not found in firebase\");\n      // await questionsRef.add(content);\n    }\n    console.log(\"data\", data);\n  };\n\n  const updateSubcategories = () => {};\n\n  return (\n    <form\n      data-id={question.id}\n      className=\"row g-3\"\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      <div className=\"col-md-6\">\n        <label className=\"form-label\" htmlFor=\"english\">\n          English\n        </label>\n        <textarea\n          className=\"form-control\"\n          name={`english`}\n          ref={register}\n          defaultValue={question.english ?? \"\"}\n        />\n      </div>\n      <div className=\"col-md-6\">\n        <label className=\"form-label\" htmlFor=\"chinese\">\n          Chinese\n        </label>\n        <textarea\n          className=\"form-control\"\n          name={`chinese`}\n          ref={register}\n          defaultValue={question.chinese ?? \"\"}\n        />\n      </div>\n      <div className=\"col-md-6\">\n        <label className=\"form-label\" htmlFor=\"category\">\n          Category\n        </label>\n        <select className=\"form-select\" name={`category`} ref={register}>\n          <option value=\"\">Select...</option>\n          {Object.keys(categories).map((key, i) => {\n            return (\n              <option selected={question.category === key} key={i} value={key}>\n                {sentenceCase(key)}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n\n      <div className=\"col-md-6\">\n        <label className=\"form-label\" htmlFor=\"strength\">\n          Strength\n        </label>\n        <input\n          className=\"form-control\"\n          name={`strength`}\n          type=\"number\"\n          ref={register}\n          defaultValue={question.strength.toString() ?? \"\"}\n        />\n      </div>\n\n      <div className=\"col-12\">\n        <button className=\"btn btn-primary\" type=\"submit\">\n          Save\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default QuestionForm;\n",["80","81"],"/Users/ivorhoulker/_CODE/questioner/src/helpers/sentenceCase.ts",[],"/Users/ivorhoulker/_CODE/questioner/src/components/AnswerForm.tsx",[],"/Users/ivorhoulker/_CODE/questioner/src/app/store.ts",[],"/Users/ivorhoulker/_CODE/questioner/src/routes/AnswerQuestions.tsx",["82"],"/Users/ivorhoulker/_CODE/questioner/src/components/AnswerGroup.tsx",[],"/Users/ivorhoulker/_CODE/questioner/src/components/Navbar.tsx",["83"],{"ruleId":"84","severity":1,"message":"85","line":6,"column":50,"nodeType":"86","messageId":"87","endLine":6,"endColumn":54},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":68,"column":40,"nodeType":"94","messageId":"95","endLine":68,"endColumn":42},{"ruleId":"84","severity":1,"message":"96","line":21,"column":13,"nodeType":"86","messageId":"87","endLine":21,"endColumn":18},{"ruleId":"88","replacedBy":"97"},{"ruleId":"90","replacedBy":"98"},{"ruleId":"88","replacedBy":"99"},{"ruleId":"90","replacedBy":"100"},{"ruleId":"84","severity":1,"message":"101","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"102","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":18},{"ruleId":"84","severity":1,"message":"103","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":16},{"ruleId":"84","severity":1,"message":"104","line":6,"column":3,"nodeType":"86","messageId":"87","endLine":6,"endColumn":20},{"ruleId":"84","severity":1,"message":"105","line":7,"column":3,"nodeType":"86","messageId":"87","endLine":7,"endColumn":16},{"ruleId":"84","severity":1,"message":"106","line":9,"column":10,"nodeType":"86","messageId":"87","endLine":9,"endColumn":22},{"ruleId":"84","severity":1,"message":"107","line":31,"column":5,"nodeType":"86","messageId":"87","endLine":31,"endColumn":13},{"ruleId":"84","severity":1,"message":"108","line":32,"column":5,"nodeType":"86","messageId":"87","endLine":32,"endColumn":11},{"ruleId":"84","severity":1,"message":"109","line":33,"column":5,"nodeType":"86","messageId":"87","endLine":33,"endColumn":14},{"ruleId":"84","severity":1,"message":"110","line":67,"column":9,"nodeType":"86","messageId":"87","endLine":67,"endColumn":28},{"ruleId":"88","replacedBy":"111"},{"ruleId":"90","replacedBy":"112"},{"ruleId":"92","severity":1,"message":"93","line":9,"column":43,"nodeType":"94","messageId":"95","endLine":9,"endColumn":45},{"ruleId":"92","severity":1,"message":"93","line":6,"column":34,"nodeType":"94","messageId":"95","endLine":6,"endColumn":36},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'docId' is assigned a value but never used.",["113"],["114"],["113"],["114"],"'useState' is defined but never used.","'Category' is defined but never used.","'firebase' is defined but never used.","'useCollectionData' is defined but never used.","'useCollection' is defined but never used.","'useAuthState' is defined but never used.","'setError' is assigned a value but never used.","'errors' is assigned a value but never used.","'getValues' is assigned a value but never used.","'updateSubcategories' is assigned a value but never used.",["113"],["114"],"no-global-assign","no-unsafe-negation"]